/*
 * Grid system
 * For detailed usage instructions, see http://susy.oddbird.net/
 * Please note this code is using the SusyOne notation
 */

.cf:before,
.cf:after,
%cf:before,
%cf:after {
  content: " "; /* 1 */
  display: table; /* 2 */
}

.cf:after,
%cf:after {
  clear: both;
}

.cf,
%cf {
  *zoom: 1;
}

.grid {
  margin: 0 auto;
  max-width: $max-site-width;
}

.grid-row {
  @extend %cf;
  margin-bottom: 1em;
}

[class*="grid-demo"] {
  display: none;
}

.grid-demo-s {
  display: block;

  @include MQ(Mplus) {
    display: none;
  }
}

.grid-demo-m {
  @include MQ(M) {
    display: block;
  }
}

.grid-demo-l {
  @include MQ(L) {
    display: block;
  }
}

.grid-demo-xl {
  @include MQ(XLplus) {
    display: block;
  }
}

@for $i from 1 through map-get($grid-S, column-count) {
  .grid__span#{$i}--small,
  .grid__#{$i}--S {
    @include grid($i, S);
  }

  .grid__push#{$i}--S {
    @if $i < map-get($grid-S, column-count) {
      @include grid-push($i, S);
    }
  }
}

@include MQ(M) {
  @for $i from 1 through map-get($grid-M, column-count) {
    .grid__span#{$i}--medium,
    .grid__#{$i}--M {
      @include grid($i, M);
    }

    .grid__push#{$i}--M {
      @if $i < map-get($grid-M, column-count) {
        @include grid-push($i, M);
      }
    }
  }
}

@include MQ(L) {
  @for $i from 1 through map-get($grid-L, column-count) {
    .grid__span#{$i}--large,
    .grid__#{$i}--L {
      @include grid($i, L);
    }

    .grid__push#{$i}--L {
      @if $i < map-get($grid-L, column-count) {
        @include grid-push($i, L);
      }
    }
  }
}

@include MQ(XLplus) {
  @for $i from 1 through map-get($grid-XL, column-count) {
    .grid__span#{$i}--xlarge,
    .grid__#{$i}--XL {
      @include grid($i, XL);
    }

    .grid__push#{$i}--XL {
      @if $i < map-get($grid-XL, column-count) {
        @include grid-push($i, XL);
      }
    }
  }
}

.padding-a {
  > [class*="grid__"]:first-of-type {
    padding-left: $padding-S;

    @include MQ(Mplus) {
      padding-left: $padding-a-M;
    }

    @include MQ(Lplus) {
      padding-left: $padding-a-L;
    }

    @include MQ(XLplus) {
      padding-left: $padding-a-XL;
    }
  }

  > [class*="grid__"]:last-of-type {
    padding-right: $padding-S;

    @include MQ(Mplus) {
      padding-right: $padding-a-M;
    }

    @include MQ(Lplus) {
      padding-right: $padding-a-L;
    }

    @include MQ(XLplus) {
      padding-right: $padding-a-XL;
    }
  }
}

.padding-b {
  > [class*="grid__"]:first-of-type {
    padding-left: $padding-S;

    @include MQ(Mplus) {
      padding-left: $padding-b-M;
    }

    @include MQ(Lplus) {
      padding-left: $padding-b-L;
    }

    @include MQ(XLplus) {
      padding-left: $padding-b-XL;
    }
  }

  > [class*="grid__"]:last-of-type {
    padding-right: $padding-S;

    @include MQ(Mplus) {
      padding-right: $padding-b-M;
    }

    @include MQ(Lplus) {
      padding-right: $padding-b-L;
    }

    @include MQ(XLplus) {
      padding-right: $padding-b-XL;
    }
  }
}

.alpha-a--small,
.alpha-a--S {
  padding-left: $padding-S;

  @include MQ(Mplus) {
    padding-left: inherit;
  }
}

.omega-a--small,
.omega-a--S {
  padding-right: $padding-S;

  @include MQ(Mplus) {
    padding-right: inherit;
  }
}

@include MQ(M) {
  .alpha-a--medium,
  .alpha-a--M {
    padding-left: $padding-a-M;
  }

  .alpha-b--medium,
  .alpha-b--M {
    padding-left: $padding-b-M;
  }

  .omega-a--medium,
  .omega-a--M {
    padding-right: $padding-a-M;
  }

  .omega-b--medium,
  .omega-b--M {
    padding-right: $padding-b-M;
  }
}

@include MQ(L) {
  .alpha-a--large,
  .alpha-a--L {
    padding-left: $padding-a-L;
  }

  .alpha-b--large,
  .alpha-b--L {
    padding-left: $padding-b-L;
  }

  .omega-a--large,
  .omega-a--L {
    padding-right: $padding-a-L;
  }

  .omega-b--large,
  .omega-b--L {
    padding-right: $padding-b-L;
  }
}

@include MQ(XLplus) {
  .alpha-a--xlarge,
  .alpha-a--XL {
    padding-left: $padding-a-XL;
  }

  .alpha-b--xlarge,
  .alpha-b--XL {
    padding-left: $padding-b-XL;
  }

  .omega-a--xlarge,
  .omega-a--XL {
    padding-right: $padding-a-XL;
  }

  .omega-b--xlarge,
  .omega-b--XL {
    padding-right: $padding-b-XL;
  }
}

[class*="grid__"] {

  display: inline-block;
  float: left;

  &:last-of-type {
    margin-right: 0;
  }
}

.grid__row {
  float: none;
  width: 100%;

  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

.grid__item {
  background: #CCC;
}